
intent: Intent is a messaging object that you can use to request an action from another app component. It is a fundamental concept for navigation and communication between components in an Android app, such as between Activities, Services, and Broadcast Receivers.
1. Explicit Intents
Explicit intents are often used within an app, for example, to start a new activity.

java
Copy code
// Starting a new Activity
Intent intent = new Intent(CurrentActivity.this, TargetActivity.class);
startActivity(intent);

Here:

CurrentActivity.this: Refers to the current activity context.
TargetActivity.class: The activity you want to open.
Passing Data with an Explicit Intent
To send data to the next activity, use the putExtra() method:

java
Copy code
Intent intent = new Intent(CurrentActivity.this, TargetActivity.class);
intent.putExtra("KEY_NAME", "Some data");
startActivity(intent);
Then, retrieve the data in TargetActivity using getIntent().getStringExtra():

***************************************************

Summary of Navigation Steps
Basic Navigation: Use startActivity(intent) to open a new activity.
Passing Data: Use putExtra() to pass data with the intent.
Receiving Data: Use getIntent().getStringExtra() in the target activity to retrieve data.
Returning Results: Use startActivityForResult() in the original activity and setResult() in the target activity to return a result.


***************************************************

java
Copy code
String data = getIntent().getStringExtra("KEY_NAME");

2. Implicit Intents
Implicit intents are used when you want the system to determine which app component can best handle the request, such as sharing content or opening a URL.

java
Copy code
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.example.com"));
startActivity(intent);
startActivity(intent) launches the SecondActivity.
Here:

Intent.ACTION_VIEW: Represents the action to perform, in this case, viewing content.
Uri.parse("http://www.example.com"): Specifies the data to view, here a URL. Android will open it in a browser or an app that can handle URLs.


Intent Flags
Flags modify the behavior of intents, such as how activities are started or handled in the task stack.

FLAG_ACTIVITY_NEW_TASK: Starts the activity in a new task.
FLAG_ACTIVITY_CLEAR_TOP: If the activity exists in the task, bring it to the top and clear the activities above it.


A. Explicit Intent: Starts a specific component.
B. Implicit Intent: Lets the system determine the best component to handle the action.
C. Intent Flags: Control task behavior.
D. PendingIntent: Used for delayed actions or actions performed by other apps.

********************Activity.java*********************

1.These import statements allow the activity to use various Android classes, such as Bundle, View, Button, and TextView.

2.Variable Declarations : 
private TextView textView;
private Button button;

textView and button are private member variables that represent UI components in this activity. These are later linked to elements in the XML layout file activity_main.xml.

3.onCreate() Method: onCreate() is a lifecycle method called when the activity is first created. This is where you set up the initial state of the activity, such as loading the layout and initializing variables.

4.super.onCreate(savedInstanceState):super.onCreate(savedInstanceState); calls the onCreate() method of the superclass (AppCompatActivity) to ensure proper initialization of the activity.
5. setContentView() : sets the XML layout file for this activity, linking it to the UI defined in activity_main.xml. The layout file specifies what the user interface will look like (for example, with a Button and a TextView).

6.. findViewById() : links the textView and button variables to actual UI components in the activity_main.xml file.
R.id.textView and R.id.button refer to the IDs of the UI elements defined in activity_main.xml


7.Button Click Listener :This sets an onClickListener on the button. When the button is clicked, the onClick() method will be triggered.Inside onClick(), textView.setText("Button Clicked!"); updates the textView to display the text "Button Clicked!"
button.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        textView.setText("Button Clicked!");
    }
});




